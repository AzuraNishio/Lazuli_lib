package nishio.lazuli_lib.core;


import net.fabricmc.fabric.api.resource.ResourceManagerHelper;
import net.fabricmc.fabric.api.resource.ResourcePackActivationType;
import net.fabricmc.fabric.impl.resource.loader.BuiltinModResourcePackSource;
import net.fabricmc.loader.api.FabricLoader;
import net.fabricmc.loader.api.ModContainer;
import net.minecraft.client.MinecraftClient;
import net.minecraft.util.Identifier;
import nishio.lazuli_lib.Lazuli_Lib_Client;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;

/**
 * LazuliEasyShaderRegistry
 *
 * • Call {@link #register()} ONCE during your client-side init.<br>
 * • Then call {@link #cleanGeneratedShaders()} (optional) and
 *   {@link #registerFullScreenPostShader(String, String)} for each shader.
 *
 * The helper creates/maintains a folder resource-pack at
 * <code>.minecraft/resourcepacks/lazuli_generated</code>, registers it as a
 * built-in DEFAULT_ENABLED pack (so it is always on), and writes wrapper JSONs
 * + shader files into it.
 */
public final class LazuliEasyShaderRegistry {

    /* =================================================================== */
    /*  0. One-time setup (call early)                                     */
    /* =================================================================== */

    private static final String     MOD_ID         = "lazuli_lib";   // ← your mod-id
    private static final String     PACK_FOLDER    = "lazuli_generated";
    private static final Identifier BUILTIN_PACK_ID = Identifier.of(MOD_ID, PACK_FOLDER);
    private static final int        PACK_FORMAT    = 18;             // MC 1.20–1.20.4

    private static boolean PACK_REGISTERED = false;

    /** Call once, e.g. from your ClientModInitializer.onInitializeClient() */
    public static void register() {
        if (PACK_REGISTERED) return;

        Path packDir = getPackDir();
        createSkeleton(packDir);

        ModContainer self = FabricLoader.getInstance()
                .getModContainer(MOD_ID)
                .orElseThrow();

        boolean ok = ResourceManagerHelper.registerBuiltinResourcePack(
                BUILTIN_PACK_ID, // pack id
                self,                                   // mod container
                ResourcePackActivationType.ALWAYS_ENABLED);

        if (ok) {
            PACK_REGISTERED = true;
            Lazuli_Lib_Client.LOGGER.info("Runtime pack '{}' registered (DEFAULT_ENABLED).",
                    BUILTIN_PACK_ID);
        } else {
            Lazuli_Lib_Client.LOGGER.error("Failed to register runtime pack at {}", packDir);
        }
    }

    /* =================================================================== */
    /*  1. Optional – wipe previous run                                   */
    /* =================================================================== */

    public static void cleanGeneratedShaders() {
        Path packDir = getPackDir();
        if (!Files.exists(packDir)) return;

        try (Stream<Path> walk = Files.walk(packDir)) {
            walk.sorted((a, b) -> b.getNameCount() - a.getNameCount())
                    .forEach(p -> { try { Files.deleteIfExists(p); } catch (IOException ignored) {} });
            Lazuli_Lib_Client.LOGGER.info("Cleared runtime shader pack '{}'", PACK_FOLDER);
        } catch (IOException io) {
            Lazuli_Lib_Client.LOGGER.error("Unable to clear runtime pack", io);
        }


    }

    /* =================================================================== */
    /*  2. Per-shader helper                                              */
    /* =================================================================== */

    private static volatile boolean NEEDS_RELOAD = false;

    public static void registerFullScreenPostShader(String shaderName, String namespace) {
        Objects.requireNonNull(shaderName, "shaderName");
        Objects.requireNonNull(namespace,  "namespace");

        Path assetsRoot = getPackDir().resolve("assets");

        /* copy .fsh --------------------------------------------------- */
        Path mcProgDir = assetsRoot.resolve("minecraft/shaders/program").resolve(namespace);
        Path dstFsh    = mcProgDir.resolve(shaderName + ".fsh");
        if (!copyShaderFsh(shaderName, namespace, dstFsh)) {
            Lazuli_Lib_Client.LOGGER.error("Could not locate {}.fsh in namespace '{}'",
                    shaderName, namespace);
            return;
        }

        /* program JSON ------------------------------------------------ */
        Path nsProgJson = assetsRoot.resolve(namespace + "/shaders/program")
                .resolve(shaderName + ".json");
        writeText(nsProgJson, makeProgramJson(namespace, shaderName));

        /* post JSON --------------------------------------------------- */
        Path nsPostJson = assetsRoot.resolve(namespace + "/shaders/post")
                .resolve(shaderName + ".json");
        writeText(nsPostJson, makePostJson(namespace, shaderName));

        NEEDS_RELOAD = true;   // mark that resources changed

        flushChanges();

        LazuliShaderRegistry.registerPostProcessingShader(shaderName, namespace);
        Lazuli_Lib_Client.LOGGER.info("Full-screen post shader '{}' ({}) set up.",
                shaderName, namespace);
    }

    /* Call once after registering all shaders (or every tick until true) */
    public static void flushChanges() {
        if (NEEDS_RELOAD && PACK_REGISTERED) {
            MinecraftClient.getInstance().reloadResources();
            NEEDS_RELOAD = false;
            Lazuli_Lib_Client.LOGGER.info("Resource reload triggered for runtime shaders.");
        }
    }

    /* =================================================================== */
    /*  Internal helpers (unchanged logic)                                */
    /* =================================================================== */

    private static Path getPackDir() {
        return FabricLoader.getInstance()
                .getGameDir()
                .resolve("resourcepacks")
                .resolve(PACK_FOLDER);
    }

    private static void createSkeleton(Path packDir) {
        try {
            Files.createDirectories(packDir.resolve("assets"));
            Path mcmeta = packDir.resolve("pack.mcmeta");
            String meta = """
                       { "pack": { "pack_format": %d,
                                   "description": "LazuliLib runtime assets" } }"""
                        .formatted(PACK_FORMAT);
            Files.writeString(mcmeta, meta, StandardCharsets.UTF_8);
            Lazuli_Lib_Client.LOGGER.info("Pack skeleton created");

        } catch (IOException e) {
            Lazuli_Lib_Client.LOGGER.error("Cannot create runtime pack skeleton", e);
        }
    }

    private static boolean copyShaderFsh(String shader, String ns, Path dst) {
        String canonical = "assets/" + ns + "/shaders/program/" + shader + ".fsh";
        try (InputStream in = LazuliEasyShaderRegistry.class
                .getClassLoader().getResourceAsStream(canonical)) {
            if (in != null) {
                copyStream(in, dst); return true;
            }
        } catch (IOException ignored) {}

        /* fall-back search in sub-folders ---------------------------- */
        try {
            URI source = LazuliEasyShaderRegistry.class
                    .getProtectionDomain().getCodeSource().getLocation().toURI();
            Path root  = Paths.get(source);

            if (!Files.isDirectory(root)) {
                try (FileSystem fs = FileSystems.newFileSystem(root, Map.of())) {
                    root = fs.getPath("/assets", ns, "shaders");
                }
            } else {
                root = root.resolve("assets").resolve(ns).resolve("shaders");
            }
            return walkAndCopy(root, shader, dst);
        } catch (Exception e) {
            Lazuli_Lib_Client.LOGGER.error("Copy error", e);
            return false;
        }
    }

    private static boolean walkAndCopy(Path root, String shader, Path dst) throws IOException {
        if (!Files.exists(root)) return false;
        try (Stream<Path> w = Files.walk(root)) {
            return w.filter(p -> p.getFileName().toString().equals(shader + ".fsh"))
                    .findFirst()
                    .map(src -> {
                        try (InputStream in = Files.newInputStream(src)) {
                            copyStream(in, dst);
                            Lazuli_Lib_Client.LOGGER.warn("{} found at '{}'; "
                                            + "move it to shaders/program/ for faster startup.",
                                    shader + ".fsh", src);
                            return true;
                        } catch (IOException e) {
                            return false;
                        }
                    }).orElse(false);
        }
    }

    private static void copyStream(InputStream in, Path dst) throws IOException {
        Files.createDirectories(dst.getParent());
        Files.copy(in, dst, StandardCopyOption.REPLACE_EXISTING);
    }

    private static void writeText(Path f, String txt) {
        try { Files.createDirectories(f.getParent());
            Files.writeString(f, txt, StandardCharsets.UTF_8,
                    StandardOpenOption.CREATE,
                    StandardOpenOption.TRUNCATE_EXISTING); }
        catch (IOException e) { Lazuli_Lib_Client.LOGGER.error("Write {}", f, e); }
    }

    private static String makeProgramJson(String ns, String shader) {
        String frag = ns + "/" + shader;
        return """
                { "blend": { "func":"add","srcrgb":"srcalpha","dstrgb":"1-srcalpha"},
                  "vertex":"full_screen",
                  "fragment":"%s",
                  "attributes":[ "Position" ],
                  "samplers":[ { "name":"DiffuseSampler"} ],
                  "uniforms":[
                    { "name":"ProjMat","type":"matrix4x4","count":16,
                      "values":[1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1] },
                    { "name":"InSize","type":"float","count":2,"values":[1,1] },
                    { "name":"OutSize","type":"float","count":2,"values":[1,1] }
                  ] }""".formatted(frag);
    }

    private static String makePostJson(String ns, String shader) {
        String id = ns + "/" + shader;
        return """
                { "targets":[ "swap" ],
                  "passes":[
                    { "name":"%s","intarget":"minecraft:main","outtarget":"swap","uniforms":[] },
                    { "name":"blit","intarget":"swap","outtarget":"minecraft:main" }
                  ] }""".formatted(id);
    }

    private LazuliEasyShaderRegistry() {}
}
